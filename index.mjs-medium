import {
  S3Client,
  GetObjectCommand,
  PutObjectCommand,
} from "@aws-sdk/client-s3";
import sharp from "sharp";

const S3 = new S3Client();
const DEST_BUCKET = process.env.DEST_BUCKET; // Fetching Destination Bucket Name From Lambda Environment Configuration
const MID_THUMBNAIL_WIDTH = 450; // Medium PX
const SUPPORTED_FORMATS = {
  jpg: true,
  jpeg: true,
  png: true,
  webp: true,
  gif: true,
  tiff: true,
  tif: true,
  raw: true,
  psd: true,
  eps: true,
  ai: true,
  indd: true,
  heic: true,
  hevc: true,
  heif: true,
  svg: true,
  bmp: true,
  ico: true,
  cur: true,
  jfif: true,
  pjpeg: true,
  pjp: true,
  apng: true,
  dsc: true,
  nef: true,
  NEF: true,
};

export const handler = async (event, context) => {
  const { eventTime, s3 } = event.Records[0];
  const srcBucket = s3.bucket.name;

  // Object key may have spaces or unicode non-ASCII characters
  const srcKey = decodeURIComponent(s3.object.key.replace(/\+/g, " "));
  console.log(srcKey);

  // Destiination Key modifiication & extension management
  const dstKey = srcKey.replace("image", "image/medium");
  console.log(dstKey);
  const ext = srcKey.replace(/^.*\./, "").toLowerCase();

  // Check the file extension if it's valid or not
  console.log(`${eventTime} - ${srcBucket}/${srcKey}`);
  if (!SUPPORTED_FORMATS[ext]) {
    console.log(`ERROR: Unsupported file type (${ext})`);
    return;
  }

  // Get the image from the source bucket
  try {
    const { Body, ContentType } = await S3.send(
      new GetObjectCommand({
        Bucket: srcBucket,
        Key: srcKey,
      })
    );
    const image = await Body.transformToByteArray();

    // Resize image
    const outputBuffer = await sharp(image).resize(MID_THUMBNAIL_WIDTH).toBuffer();

    // Store new image in the destination bucket
    await S3.send(
      new PutObjectCommand({
        Bucket: DEST_BUCKET,
        Key: dstKey,
        Body: outputBuffer,
        ContentType,
      })
    );
    console.log(await S3.send);

    const message = `Successfully resized ${srcBucket}/${srcKey} and uploaded to ${DEST_BUCKET}/${dstKey}`;
    console.log(message);
    return {
      statusCode: 200,
      body: message,
    };
  } catch (error) {
    console.log(error);
  }
};
